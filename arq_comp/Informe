TAD String
=== ======

    String es una abstracción de datos sobre los C-string, que tiene la 
siguiente interface:


- Funciones de Creación y Destrucción:

string* string_create (char* cstr)

string* string_destroy (string* str)


- Funciones Proyectoras:

char* string_get_front (string *str, int pos ,int len)

char* string_get_back (string *str, int pos ,int len)


- Funciones Consultoras (Side-Effect Free):

char* string_slice_right (const string *str, int count, int len)

char* string_slice_left (const string *str, int count, int len)


   Un objeto string se basa en un puntero, al que llamaremos 'string pointer' 
que apunta a una posición dentro del c-string con el que fue creado.
   Un objeto string se adueña del puntero cstr hasta su destrucción, que 
cstr pasa a ser responsabilidad del usuario.
  Todos los bloques de memorias devuelto por las funciones deben ser liberados
por el llamador.
  Notar string se comporta como un arreglo circular.

   La función string_get_front (str, pos, len) establece el 'string pointer' 
en la posición 'pos' y devuelve un puntero hacia un bloque de memoria 'result' 
que satisface:

	result [i] == str-> data[pos + i % data-> len_data]  para i = 0..len-1

   La función 'string_get_back (srt, pos, len)' se define como:
	
	string_get_back (srt, pos, len) <=> string_get_front (str, tmp, len)
	donde: 
	tmp = ((pos - len + 1) + len_data) % len_data (Ver win_string.h)
	
    Las funciones string_slice_* () se comportan de manera analóga a  
string_get_* (), sólo que no modifican el string pointer.



ASSERT
======

  no_std_assert.h contiene simplemente una macro:
      
      ASSERT(s)  !(s) ? abort () : 1	

que utilizamos para verficar las precondiciones en las llamadas a funciones. Si
no se satisface 's' el programa termina con una llamada a abort ().

   
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    