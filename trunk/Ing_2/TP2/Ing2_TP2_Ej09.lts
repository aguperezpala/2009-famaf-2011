
/* # de libros distintos que maneja la editorial */
const NBOOKS = 2
range NumBooks = 0..NBOOKS-1

/* Existencias máximas posibles para un libro */
const BMAX = 2
range Copies = 0..BMAX

/* Precio genérico de un librito */
const BPRICE = 2

/* # de clientes simultáneos */
const CMAX = 2
range NumClients = 0..CMAX-1

/* Saldo inicial de un cliente */
const SMAX = 2



/******************************************************************************/
/*******************************   Libros   ***********************************/

/* Un librito */
BOOK = BOOK[BMAX],
BOOK[i:Copies] = (ask.existence[i] -> BOOK[i]
                 |when (i>0)  buy  -> BOOK[i-1]).

/* Candado de acceso a las copias de ese librito */
LOCK = (acquire -> release -> LOCK).

||BOOKS = (book[NumBooks]:BOOK || lock[NumBooks]:LOCK)
  /{forall[b:NumBooks] {
        book[b].lock.acquire / lock[b].acquire,
        book[b].lock.release / lock[b].release
    }
   }.



/******************************************************************************/
/******************************   Clientes   **********************************/

/* Un cliente */
CLIENT = (ask.balance[s:0..SMAX]   -> CLIENT
         |request.book[b:NumBooks] -> (allowed -> submit.card
                                               -> (accepted -> CLIENT
                                                  |rejected -> CLIENT)
                                      |forbidden            -> CLIENT)
         ).

/* Su tarjeta de crédito */
CARD = CARD[SMAX],
CARD[i:0..SMAX] = (ask.balance[i] -> CARD[i]
                  |submit.card -> req.extraction[j:0..SMAX]
                               -> if (j <= i)
                                  then (accepted -> extract -> CARD[i-j])
                                  else (rejected -> CARD[i]  )
                  ).

/* Clientela */
||CLIENTS = (client[NumClients]:CLIENT || client[NumClients]:CARD).



/******************************************************************************/
/**************************   Tienda de libros   ******************************/

/* Controlador de compra de (copias de) un libro */
BOOK_CTRL = (request.book
             -> book.lock.acquire
             -> ask.existence[e:0..BMAX]
             -> if (e>0)
                then (   allowed
                      -> request.card
                      -> card.req.extraction[BPRICE]
                      -> ( accepted -> extract -> buy -> QUIT
                         | rejected ->                   QUIT) )
                else ( forbidden -> QUIT) ),

QUIT = ( book.lock.release -> BOOK_CTRL )

+ {card.req.extraction[s:0..SMAX]} \{nop}.

/* Controlador de todos los libritos (en paralelo) */
||BSTORE = (bs[NumBooks]:BOOK_CTRL).



/******************************************************************************/
/*******************************   Sistema  ***********************************/

||SYSTEM = (CLIENTS || cl[NumClients]::BSTORE || BOOKS)

  /{ /* Coordinamos las acciones de la tienda con todos ... */
     forall[c:NumClients] {

         forall[b:NumBooks] {

             /* ... del cliente con la tienda */
             client[c].request.book[b] / cl[c].bs[b].request.book,
             client[c].allowed         / cl[c].bs[b].allowed,
             client[c].forbidden       / cl[c].bs[b].forbidden,
             client[c].submit.card     / cl[c].bs[b].request.card,
             forall[s:0..SMAX] {
                 client[c].req.extraction[s] / cl[c].bs[b].card.req.extraction[s]
             },
             client[c].accepted / cl[c].bs[b].accepted,
             client[c].rejected / cl[c].bs[b].rejected,
             client[c].extract  / cl[c].bs[b].extract,
             
             /* ... de la tienda con los libros */
             book[b].lock.acquire / cl[c].bs[b].book.lock.acquire,
             book[b].lock.release / cl[c].bs[b].book.lock.release,
             book[b].buy          / cl[c].bs[b].buy,
             forall[e:Copies] {
                 book[b].ask.existence[e] / cl[c].bs[b].ask.existence[e]
             }
         }
     }
   }.
