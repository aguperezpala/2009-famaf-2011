
/* # de libros distintos que maneja la editorial */
const NBOOKS = 2
range NumBooks = 0..NBOOKS-1

/* Existencias máximas posibles para un libro */
const BMAX = 2
range Copies = 0..BMAX

/* Precio genérico de un librito */
const BPRICE = 2

/* # de clientes simultáneos */
const CMAX = 2
range NumClients = 0..CMAX-1

/* Saldo inicial de un cliente */
const SMAX = 2



/******************************************************************************/
/*******************************   Libros   ***********************************/

/* Un librito */
BOOK = BOOK[BMAX],
BOOK[i:Copies] = (ask.existence[i] -> BOOK[i]
                 |when (i>0)  buy  -> BOOK[i-1]).

/* Candado de acceso a las copias de ese librito */
LOCK = (acquire -> release -> LOCK).

||BOOKS = (book[NumBooks]:BOOK || book.lock[NumBooks]:LOCK).



/******************************************************************************/
/******************************   Clientes   **********************************/

/* Un cliente */
CLIENT = (request.book[b:NumBooks] -> enter.card.no ->
                                     (accepted[b] -> CLIENT
                                     |rejected[b] -> CLIENT)
         |ask.balance[s:0..SMAX]                  -> CLIENT).

/* Su tarjeta de crédito */
CARD = CARD[SMAX],
CARD[i:0..SMAX] = (owner.ask.balance[i]          -> CARD[i]
                  |submit.card -> ask.balance[i] -> CARD[i]
                  |extract[j:0..SMAX] -> if (j <= i) then CARD[i-j]
                                                     else CARD[i]
                  ).

/* Clientela */
||CLIENTS = (client[NumClients]:CLIENT || card[NumClients]:CARD)

  /{ forall[c:NumClients] {
         forall[s:0..SMAX] {
            client[c].ask.balance[s] / card[c].owner.ask.balance[s]
         }
     }
   }.



/******************************************************************************/
/**************************   Tienda de libros   ******************************/

/* Controlador de compra de (copias de) un libro */
BOOK_CTRL = (request.book
             -> book.lock.acquire
             -> ask.existence[e:0..BMAX]
             -> if (e>0)
                then (
                     request.card.no
                     -> card.ask.balance[s:0..SMAX]
                     -> if (s >= BPRICE)
                        then
                             (  extract[BPRICE]
                             -> buy
                             -> book.lock.release
                             -> accepted
                             -> BOOK_CTRL)
                        else
                            (   book.lock.release
                             -> rejected
                             -> BOOK_CTRL)
                ) else (
                        book.lock.release
                     -> rejected
                     -> BOOK_CTRL
                )
            ) + {extract[0..SMAX]}.

/* Controlador de todos los libritos (en paralelo) */
||BSTORE = (bs[NumBooks]:BOOK_CTRL).



/******************************************************************************/
/*******************************   Sistema  ***********************************/


/* TODO:
 *      Hay problemas de deadlock.
 *      Luego de que BOOK_CTRL hace "cl[c].bs[b].request.card.no"
 *      (traducido a "card[c].submit.card" para coordinar con la tarjeta)
 *      se bloquea la ejecución.
 *      La acción siguiente debería ser "card[c].ask.balance[s]", pero
 *      aunque ambos BOOK_CTRL y CARD la tienen habilitada el sistema no
 *      permite continuar la ejecución.
 */


||SYSTEM = (CLIENTS || cl[NumClients]::BSTORE || BOOKS)

  /{ /* Coordinamos las acciones de la tienda con todos ... */
     forall[c:NumClients] {

         forall[b:NumBooks] {

             /* ... del cliente con la tienda */
             client[c].request.book[b]  / cl[c].bs[b].request.book,
             client[c].accepted[b]      / cl[c].bs[b].accepted,
             client[c].rejected[b]      / cl[c].bs[b].rejected,
             
             /* ... de la tienda con la tarjeta */
             card[c].submit.card        / client[c].enter.card.no,
             card[c].submit.card        / cl[c].bs[b].request.card.no,
             forall[s:0..SMAX] {
                 card[c].ask.balance[s] / cl[c].bs[b].card.ask.balance[s],
                 card[c].extract[s]     / cl[c].bs[b].extract[s]
             },

             /* ... de la tienda con los libros */
             book.lock[b].acquire / cl[c].bs[b].book.lock.acquire,
             book.lock[b].release / cl[c].bs[b].book.lock.release,
             book[b].buy          / cl[c].bs[b].buy,
             forall[e:Copies] {
                 book[b].ask.existence[e] / cl[c].bs[b].ask.existence[e]
             }
         }
     }
   }.
