/* Museum's maximum capacity */
const MAX_VIS = 9
range MV = 0..MAX_VIS
set VisitorsAlpha = {read[MV], write[MV]}
set ForbiddenActionsTurnstiles = {east.departure, west.arrival}
set ForbiddenActionsControl = {ctrl.write[MV]}


/* Current # of visitors */
VIS = VIS[0],
VIS[i:MV] = ( read[i]     -> VIS[i]
			| write[j:MV] -> VIS[j]
			).

/* Mutex for VIS correct update */
LOCK = (acquire -> release -> LOCK).


/* Museum's generic gate */
TURNSTILE = ( enable -> TE),
TE = ( arrival   -> acquire -> read[i:MV] -> if (i < MAX_VIS) then INC[i] else REJECT
	 | departure -> acquire -> read[i:MV] -> if (i > 0)       then DEC[i] else REJECT
	 | disable   -> TURNSTILE
	 ),
REJECT = (release -> TE),
INC[i:MV] = (write[i+1] -> release -> TE),
DEC[i:MV] = (write[i-1] -> release -> TE)
+ VisitorsAlpha.


/* Museum's access control */
CONTROL = ( open  -> CONTROL
		  | close -> CLOSING),
CLOSING = (ctrl.read[i:MV] -> if (i==0) then CLOSE else CLOSING),
CLOSE   = (closed -> CONTROL)
+ ForbiddenActionsTurnstiles.

/* Museum's director */
DIRECTOR = ( open -> close -> closed -> DIRECTOR )
+ ForbiddenActionsControl.


/* Fucking museum */
||MUSEUM =  (  {east,west,ctrl}::VIS
			|| {east,west}     ::LOCK
			|| {east,west}      :TURNSTILE 
			||                   CONTROL
			||                   DIRECTOR )
	/{  open     /{east,west}.enable,
		close	 /east.disable,
		closed	 /west.disable,
		arrival  /east.arrival,
		departure/west.departure }
	@{  arrival,
		departure,
		open,
		close,
		closed }.
